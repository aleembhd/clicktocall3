<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Click to Call</title>
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
    <style>
        :root {
            --primary-color: #000000;
            --secondary-color: #ffffff;
            --accent-color: #808080;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: var(--primary-color);
            color: var(--secondary-color);
            padding: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 1000;
            box-shadow: 0 2px 5px var(--shadow-color);
        }

        .header h1 {
            font-size: 1.2rem;
        }

        .header-count {
            font-size: 1rem;
            font-weight: 600;
            color: var(--secondary-color);
            background: rgba(255,255,255,0.1);
            padding: 4px 12px;
            border-radius: 15px;
        }

        .back-btn {
            background: none;
            border: none;
            color: var(--secondary-color);
            font-size: 1.5rem;
            cursor: pointer;
            padding: 5px 10px;
            transition: transform 0.2s ease;
        }

        .back-btn:hover {
            transform: translateX(-3px);
        }

        .call-list {
            margin-top: 70px;
            padding-bottom: 20px;
        }

        .call-item {
            background: var(--secondary-color);
            border-radius: 12px;
            margin: 10px 0;
            padding: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 5px var(--shadow-color);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            animation: fadeIn 0.3s ease;
        }

        .call-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px var(--shadow-color);
        }

        .number-info {
            flex: 1;
            display: flex;
            align-items: center;
        }

        .phone-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-left: 15px;
        }

        .call-btn {
            background: var(--primary-color);
            color: var(--secondary-color);
            border: none;
            border-radius: 25px;
            padding: 10px 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .call-btn:hover {
            background: #333;
            transform: scale(1.05);
        }

        .call-btn:active {
            transform: scale(0.95);
        }

        .call-icon {
            width: 16px;
            height: 16px;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .search-bar {
            position: fixed;
            top: 70px;
            left: 0;
            right: 0;
            padding: 10px 20px;
            background: #fff;
            z-index: 999;
            box-shadow: 0 2px 5px var(--shadow-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
        }

        .search-input {
            width: 250px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 25px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.2s ease;
        }

        .search-input:focus {
            border-color: var(--primary-color);
        }

        .activity-btn {
            background: var(--primary-color);
            color: var(--secondary-color);
            border: none;
            border-radius: 25px;
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

        .activity-btn:hover {
            background: #333;
        }

        .activity-dropdown {
            position: absolute;
            top: 100%;
            right: 20px;
            background: var(--secondary-color);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 10px 0;
            margin-top: 5px;
            display: none;
            z-index: 1000;
            min-width: 200px;
        }

        .activity-dropdown.show {
            display: block;
            animation: fadeIn 0.2s ease;
        }

        .activity-option {
            padding: 12px 20px;
            color: #333;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .activity-option:hover {
            background-color: #f5f5f5;
        }

        .activity-count {
            color: #666;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .call-list {
            margin-top: 130px;
            background: var(--secondary-color);
            border-radius: 12px;
            box-shadow: 0 2px 5px var(--shadow-color);
            padding: 15px;
        }

        .number-row {
            padding: 15px 10px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 2px solid #e0e0e0;
            transition: background-color 0.2s ease;
        }

        .number-row:last-child {
            border-bottom: none;
        }

        .number-row:hover {
            background-color: #f8f8f8;
        }

        .serial-number {
            font-size: 1.2rem;
            font-weight: 500;
            color: #666;
            margin-right: 25px;
            min-width: 30px;
            text-align: right;
        }

        .number-info {
            flex: 1;
        }

        .call-btn {
            background: var(--primary-color);
            color: var(--secondary-color);
            border: none;
            border-radius: 25px;
            padding: 10px 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        @media (max-width: 480px) {
            .container {
                padding: 10px;
            }

            .call-item {
                padding: 12px;
            }

            .phone-number {
                font-size: 1.3rem;
            }

            .call-btn {
                padding: 8px 20px;
                font-size: 1rem;
            }
        }

        /* Loading animation */
        .loading-skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
            border-radius: 12px;
            height: 60px;
            margin: 10px 0;
        }

        @keyframes loading {
            0% {
                background-position: 200% 0;
            }
            100% {
                background-position: -200% 0;
            }
        }

        /* Popup styles */
        .popup-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-card {
            background-color: var(--secondary-color);
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            color: var(--primary-color);
            text-align: center;
        }

        .popup-title {
            font-size: 24px;
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .popup-buttons {
            display: flex;
            justify-content: space-around;
            margin-top: 25px;
        }

        .popup-button {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .yes-button {
            background-color: #4CAF50;
            color: white;
        }

        .no-button {
            background-color: #f44336;
            color: white;
        }

        .popup-card-2 {
            background-color: var(--secondary-color);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 30px;
            text-align: center;
            max-width: 300px;
            width: 90%;
            animation: popIn 0.3s ease-out;
        }

        .popup-buttons-2 {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .popup-button-2 {
            padding: 12px 24px;
            border: none;
            border-radius: 30px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .not-interested-button {
            background-color: #f44336;
            color: white;
        }

        .interested-button {
            background-color: #4CAF50;
            color: white;
        }

        .callback-button {
            background-color: #2196F3;
            color: white;
        }

        /* New CSS for status label */
        .status-label {
            background: var(--primary-color);
            color: var(--secondary-color);
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 0.9rem;
            font-weight: 600;
            text-transform: capitalize;
        }

        /* Smooth animations */
        .call-item {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .call-datetime {
            font-size: 0.8rem;
            color: #666;
            margin-top: 4px;
        }

        .status-label {
            font-size: 0.8rem;
            padding: 2px 8px;
            border-radius: 12px;
            background: #f0f0f0;
            color: #666;
            margin-left: 10px;
        }

        @keyframes slideOutRight {
            0% {
                transform: translateX(0);
                opacity: 1;
            }
            100% {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        @keyframes slideOutLeft {
            0% {
                transform: translateX(0);
                opacity: 1;
            }
            100% {
                transform: translateX(-100%);
                opacity: 0;
            }
        }

        .slide-out-right {
            animation: slideOutRight 0.5s ease forwards;
        }

        .slide-out-left {
            animation: slideOutLeft 0.5s ease forwards;
        }

        .call-item {
            transition: all 0.5s ease;
            transform-origin: center;
        }

        .call-item.removing {
            animation: removeItem 0.5s ease forwards;
        }

        @keyframes removeItem {
            0% {
                transform: scale(1) translateX(0);
                opacity: 1;
            }
            50% {
                transform: scale(0.9) translateX(-30px);
                opacity: 0.5;
            }
            100% {
                transform: scale(0.8) translateX(-100%);
                opacity: 0;
            }
        }

        /* First ensure the animation CSS is consistent everywhere */
        @keyframes crushIntoBall {
            0% {
                transform: scale(1) rotate(0deg);
                border-radius: 0%;
                opacity: 1;
            }
            50% {
                transform: scale(0.6) rotate(-10deg);
                border-radius: 30%;
                opacity: 0.7;
            }
            100% {
                transform: scale(0) rotate(-20deg);
                border-radius: 50%;
                opacity: 0;
            }
        }

        .call-item.ball-crush {
            animation: crushIntoBall 0.4s ease-in forwards;
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
    </style>
    <script src="https://www.gstatic.com/firebasejs/8.9.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.9.1/firebase-database.js"></script>
</head>
<body onload="initializeClickToCall()">
    <div class="header">
        <button class="back-btn" onclick="window.close()">←</button>
        <h1>Click To Call <span class="header-count" id="headerCount">0/0</span></h1>
        <div style="width: 40px"></div>
    </div>

    <div class="search-bar">
        <input type="text" class="search-input" placeholder="Search phone number..." id="searchInput">
        <button class="activity-btn" id="activityBtn">
            My Activity
        </button>
        <div class="activity-dropdown" id="activityDropdown">
            <div class="activity-option" onclick="showActivity('all')">
                <span>All Calls</span>
                <span class="activity-count" id="allCallsCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('not-lift')">
                <span>Not Lift Calls</span>
                <span class="activity-count" id="notLiftCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('callback')">
                <span>Callback Calls</span>
                <span class="activity-count" id="callbackCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('interested')">
                <span>Interested Calls</span>
                <span class="activity-count" id="interestedCount">(0)</span>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="call-list" id="callList">
            <!-- Call items will be dynamically added here -->
        </div>
    </div>

    <div id="callAnsweredPopup" class="popup-overlay">
        <div class="popup-card">
            <div class="popup-title">Was The Call Answered?</div>
            <div class="popup-buttons">
                <button class="popup-button yes-button" onclick="handleCallAnswer(true)">YES</button>
                <button class="popup-button no-button" onclick="handleCallAnswer(false)">NO</button>
            </div>
        </div>
    </div>

    <div id="callStatusPopup" class="popup-overlay">
        <div class="popup-card-2">
            <div class="popup-title">Call Status</div>
            <div class="popup-buttons-2">
                <button class="popup-button-2 interested-button" onclick="handleCallStatus('interested')">Interested</button>
                <button class="popup-button-2 callback-button" onclick="handleCallStatus('callback')">Callback</button>
            </div>
        </div>
    </div>

    <script>
        // Initialize Firebase config and app (keep your existing config)
        const firebaseConfig = {
            apiKey: "AIzaSyCLrrkbXcW-exG8_n4kOEmzA-SETMWqo-0",
            authDomain: "feedbackapp-5904d.firebaseapp.com",
            databaseURL: "https://feedbackapp-5904d-default-rtdb.firebaseio.com",
            projectId: "feedbackapp-5904d",
            storageBucket: "feedbackapp-5904d.firebasestorage.app",
            messagingSenderId: "620175464767",
            appId: "1:620175464767:web:8054286a27a26210619b8a"
        };
        firebase.initializeApp(firebaseConfig);

        let currentNumber = null;
        let currentSerialNumber = null;
        let callStartTime = null;

        // Initialize Firebase and setup real-time listener
        let realtimeListener = null; // To store reference to listener

        // Add real-time listeners for activity counts
        let activityListeners = {};

        async function initializeClickToCall() {
            try {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                console.log('1. Starting initialization with telecaller ID:', telecallerId);

                // Setup real-time listener for uploaddata
                const dbRef = firebase.database().ref(`Click to calls/telecaller${telecallerId}/uploaddata`);
                
                // Remove any existing listener first
                if (realtimeListener) {
                    dbRef.off('value', realtimeListener);
                }

                // Setup new listener
                realtimeListener = dbRef.on('value', async (snapshot) => {
                    console.log('2. Received real-time update from Firebase');
                    const data = snapshot.val();
                    
                    if (data) {
                        // Convert to ordered array maintaining sequence
                        const numbers = Object.entries(data)
                            .sort((a, b) => parseInt(a[0]) - parseInt(b[0]))
                            .map(([index, number]) => ({
                                number,
                                serialNumber: parseInt(index) + 1
                            }));

                            console.log('3. Processed numbers:', numbers);
                            
                            // Update UI smoothly
                            await displayNumbers(numbers);
                            updateCounts();
                    } else {
                        console.log('No numbers available');
                        const callList = document.getElementById('callList');
                        callList.innerHTML = '<div class="call-item">No numbers available. Please upload numbers first.</div>';
                    }
                }, (error) => {
                    console.error('Firebase listener error:', error);
                });

            } catch (error) {
                console.error('Initialization error:', error);
            }
        }

        // Modify displayNumbers for smoother updates
        async function displayNumbers(numbers) {
            try {
                const callList = document.getElementById('callList');
                const headerCount = document.getElementById('headerCount');

                // Create new HTML
                const callListHtml = numbers.map(item => `
                    <div class="call-item" data-number="${item.number}">
                        <div class="number-info">
                            <span class="serial-number">${item.serialNumber}.</span>
                            <div class="phone-number">${item.number}</div>
                        </div>
                        <button class="call-btn" onclick="initiateCall('${item.number}', ${item.serialNumber})">
                            <svg class="call-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
                            </svg>
                            Call
                        </button>
                    </div>
                `).join('');

                // Update DOM
                callList.innerHTML = callListHtml;
                headerCount.textContent = `${numbers.length} numbers remaining`;

            } catch (error) {
                console.error('Display error:', error);
            }
        }

        // Standard data structure for ALL call outcomes
        const createStandardCallData = (number, serialNumber, status) => {
            const now = new Date();
            const day = String(now.getDate()).padStart(2, '0');
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const year = now.getFullYear().toString().slice(-2);
            const hours = now.getHours() % 12 || 12;
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const ampm = now.getHours() >= 12 ? 'PM' : 'AM';
            
            return {
                dateTime: `${day}/${month}/${year} ${hours}:${minutes} ${ampm}`,
                duration: "00:04",
                notes: status,
                serialNumber: serialNumber,
                status: status
            };
        };

        // Handle initial call answer
        function handleCallAnswer(answered) {
            try {
                document.getElementById('callAnsweredPopup').style.display = 'none';
                
                if (answered) {
                    // If "Yes" clicked, show status options (Interested/Callback)
                    document.getElementById('callStatusPopup').style.display = 'flex';
                } else {
                    // If "No" clicked, handle as not-lift
                    handleCallStatus('not-lift');
                }
            } catch (error) {
                console.error('Error in handleCallAnswer:', error);
            }
        }

        // Handle final status selection (used for all statuses)
        async function handleCallStatus(status) {
            try {
                // Hide status popup
                document.getElementById('callStatusPopup').style.display = 'none';
                
                const telecallerId = localStorage.getItem('currentTelecallerId');
                const db = firebase.database();
                
                // Create standardized data structure
                const callData = createStandardCallData(currentNumber, currentSerialNumber, status);
                
                // Save to Firebase with consistent structure
                await db.ref(`Click to calls/telecaller${telecallerId}/${status}/${currentNumber}`).set(callData);
                
                // Remove from other categories
                const categories = ['not-lift', 'interested', 'callback'];
                for (const category of categories) {
                    if (category !== status) {
                        await db.ref(`Click to calls/telecaller${telecallerId}/${category}/${currentNumber}`).remove();
                    }
                }

                // Update UI and animate
                await updateCounts();
                
                const callItem = document.querySelector(`[data-number="${currentNumber}"]`);
                if (callItem) {
                    callItem.classList.add('ball-crush');
                    setTimeout(() => callItem.remove(), 400);
                }

            } catch (error) {
                console.error('Error in handleCallStatus:', error);
            }
        }

        // Search functionality
        document.getElementById('searchInput')?.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const items = document.getElementsByClassName('call-item');
            
            Array.from(items).forEach(item => {
                const number = item.querySelector('.phone-number').textContent;
                if (number.toLowerCase().includes(searchTerm)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        });

        // Update the header to show telecaller ID
        function updateHeader() {
            const telecallerId = localStorage.getItem('currentTelecallerId');
            const headerTitle = document.querySelector('.header h1');
            headerTitle.textContent = `Telecaller ${telecallerId} - Click To Call`;
        }

        // Update the back button to return to index.html
        document.querySelector('.back-btn').onclick = () => {
            localStorage.removeItem('telecallerId'); // Clear stored ID
            window.location.href = 'index.html';
        };

        // Function to format phone number
        function formatPhoneNumber(number) {
            return number;
        }

        // Function to create call item
        function createNumberRow(item) {
            const row = document.createElement('div');
            row.className = 'number-row';
            row.innerHTML = `
                <div class="number-info">
                    <span class="serial-number">${item.serialNumber}.</span>
                    <div class="phone-number">${formatPhoneNumber(item.number)}</div>
                </div>
                <button class="call-btn" onclick="initiateCall('${item.number}', ${item.serialNumber})">
                    <svg class="call-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
                    </svg>
                    Call
                </button>
            `;
            return row;
        }

        // Add Firebase configuration and initialization
        // Store calls in localStorage
        const STORAGE_KEYS = {
            ALL_CALLS: 'allCalls',
            NOT_LIFT: 'notLiftCalls',
            NOT_INTERESTED: 'notInterestedCalls',
            CALLBACK: 'callbackCalls',
            INTERESTED: 'interestedCalls'
        };

        // Initialize storage if not exists
        if (!localStorage.getItem(STORAGE_KEYS.ALL_CALLS)) {
            localStorage.setItem(STORAGE_KEYS.ALL_CALLS, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.NOT_LIFT, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.NOT_INTERESTED, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.CALLBACK, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.INTERESTED, JSON.stringify([]));
        }

        // Update the activity dropdown HTML
        document.querySelector('.activity-dropdown').innerHTML = `
            <div class="activity-option" onclick="showActivity('all')">
                <span>All Calls</span>
                <span class="activity-count" id="allCallsCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('not-lift')">
                <span>Not Lift Calls</span>
                <span class="activity-count" id="notLiftCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('callback')">
                <span>Callback Calls</span>
                <span class="activity-count" id="callbackCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('interested')">
                <span>Interested Calls</span>
                <span class="activity-count" id="interestedCount">(0)</span>
            </div>
        `;

        // Update initiateCall to handle transitions
        function initiateCall(number, serialNumber) {
            try {
                if (!number || !serialNumber) {
                    console.error('Invalid parameters in initiateCall:', { number, serialNumber });
                    return;
                }
                
                currentNumber = number;
                currentSerialNumber = serialNumber;
                
                // Update timestamp only in current category
                const telecallerId = localStorage.getItem('currentTelecallerId');
                const now = new Date();
                const timestamp = now.toLocaleString('en-IN', {
                    day: '2-digit',
                    month: '2-digit',
                    year: '2-digit',
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                });

                // Show popup and initiate call
                document.getElementById('callAnsweredPopup').style.display = 'flex';
                setTimeout(() => {
                    window.location.href = `tel:${number}`;
                }, 1000);
                
            } catch (error) {
                console.error('Error in initiateCall:', error);
                alert('Error initiating call. Please try again.');
            }
        }

        // Simplified updateCounts function
        async function updateCounts() {
            try {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                const db = firebase.database();
                const basePath = `Click to calls/telecaller${telecallerId}`;

                // Fetch all counts simultaneously
                const [
                    uploadSnapshot,
                    notLiftSnapshot,
                    interestedSnapshot,
                    callbackSnapshot
                ] = await Promise.all([
                    db.ref(`${basePath}/uploaddata`).once('value'),
                    db.ref(`${basePath}/not-lift`).once('value'),
                    db.ref(`${basePath}/interested`).once('value'),
                    db.ref(`${basePath}/callback`).once('value')
                ]);

                // Update counts in UI
                document.getElementById('allCallsCount').textContent = 
                    `(${uploadSnapshot.numChildren()})`;
                document.getElementById('notLiftCount').textContent = 
                    `(${notLiftSnapshot.numChildren()})`;
                document.getElementById('interestedCount').textContent = 
                    `(${interestedSnapshot.numChildren()})`;
                document.getElementById('callbackCount').textContent = 
                    `(${callbackSnapshot.numChildren()})`;

            } catch (error) {
                console.error('Error updating counts:', error);
            }
        }

        // Activity dropdown functionality
        const activityBtn = document.getElementById('activityBtn');
        const activityDropdown = document.getElementById('activityDropdown');

        activityBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            activityDropdown.classList.toggle('show');
        });

        document.addEventListener('click', (e) => {
            if (!activityDropdown.contains(e.target) && !activityBtn.contains(e.target)) {
                activityDropdown.classList.remove('show');
            }
        });

        // Clean up listener when page is closed/navigated away
        window.addEventListener('beforeunload', () => {
            if (realtimeListener) {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                const dbRef = firebase.database().ref(`Click to calls/telecaller${telecallerId}/uploaddata`);
                dbRef.off('value', realtimeListener);
            }
        });

        // Add this helper function to validate the Firebase connection
        function checkFirebaseConnection() {
            const connectedRef = firebase.database().ref(".info/connected");
            connectedRef.on("value", (snap) => {
                if (snap.val() === true) {
                    console.log("Connected to Firebase");
                } else {
                    console.log("Not connected to Firebase");
                }
            });
        }

        // Call this when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            checkFirebaseConnection();
        });

        // First, let's modify where the call data is initially saved
        async function saveCallData(number, duration) {
            try {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                
                // Store this data temporarily instead of saving to Firebase
                window.tempCallData = {
                    number: number,
                    dateTime: new Date().toLocaleString('en-IN', {
                        day: '2-digit',
                        month: '2-digit',
                        year: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    }),
                    duration: '<img src="images/outgoing-calls.png" width="17" height="17" alt="Outgoing Call"> Outgoing'
                };

                console.log('Stored temporary call data:', window.tempCallData);
                
                // Show status popup here
                showStatusPopup(number);

            } catch (error) {
                console.error('Error storing call data:', error);
            }
        }

        // Then update the status click handler
        async function handleStatusClick(number, status) {
            try {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                if (!telecallerId) {
                    throw new Error('No telecaller ID found');
                }

                const tempData = window.tempCallData || {};
                
                // Use the same date/time format
                const now = new Date();
                const day = String(now.getDate()).padStart(2, '0');
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const year = now.getFullYear().toString().slice(-2);
                const time = now.toLocaleTimeString('en-US', { 
                    hour: 'numeric',    // Single digit hour (1-12)
                    minute: '2-digit',  // Two digit minutes
                    hour12: true        // 12-hour format with AM/PM
                });
                
                const indianDateTime = `${day}/${month}/${year} ${time}`;

                const finalCallData = {
                    number: number,
                    dateTime: tempData.dateTime || indianDateTime,
                    duration: '<img src="images/outgoing-calls.png" width="17" height="17" alt="Outgoing Call"> Outgoing',
                    notes: status,
                    status: status
                };

                // Save to Firebase
                const statusPath = status.toLowerCase().replace(' ', '-');
                await firebase.database()
                    .ref(`Click to calls/telecaller${telecallerId}/${statusPath}/${number}`)
                    .set(finalCallData);
                
                window.tempCallData = null;
                closeStatusPopup();
                showActivity('uploaddata');

            } catch (error) {
                console.error('Error in handleStatusClick:', error);
                alert('Failed to update call status');
            }
        }

        // Update the call completion handler
        function handleCallCompletion(number, callDuration) {
            console.log('Call completed:', { number, callDuration });
            saveCallData(number, callDuration);
        }
    </script>
</body>
</html> 